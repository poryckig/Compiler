// Zmienne globalne
int globalInt = 42;
float globalFloat = 3.14;
string globalString = "Jestem zmienna globalna";

// Funkcja uzywajaca zmiennych globalnych
void displayGlobals() {
    print "=== Wyswietlenie zmiennych globalnych ===";
    print "globalInt = ";
    print globalInt;
    print "globalFloat = ";
    print globalFloat;
    print "globalString = ";
    print globalString;
}

// Funkcja zmieniajaca zmienne globalne
void modifyGlobals() {
    print "=== Modyfikacja zmiennych globalnych ===";
    globalInt = 100;
    globalFloat = 2.71828;
    globalString = "Zmodyfikowana zmienna globalna";
    print "Zmienne globalne po modyfikacji:";
    displayGlobals();
}

// Funkcja z lokalnymi zmiennymi przesłaniajacymi globalne
void shadowingTest() {
    print "=== Test przeslaniania zmiennych ===";
    int globalInt = 999;    // Przesłania zmienna globalna
    float globalFloat = 1.1; // Przesłania zmienna globalna
    
    print "Lokalna zmienna 'globalInt' = ";
    print globalInt;
    print "Lokalna zmienna 'globalFloat' = ";
    print globalFloat;
    print "Globalna zmienna 'globalString' = ";
    print globalString;  // Uzycie zmiennej globalnej, ktora nie jest przeslonieta
}

// Funkcja testująca zasięg parametrow funkcji
int parameterScope(int value) {
    print "=== Test zasiegu parametrow ===";
    print "Parametr 'value' = ";
    print value;
    
    // Zmienna lokalna o tej samej nazwie co parametr
    {
        // Zagniezdzony blok z przeslonieciem parametru
        int value = 777;
        print "Lokalna zmienna 'value' w bloku = ";
        print value;
    }
    
    // Powrot do parametru
    print "Parametr 'value' po bloku = ";
    print value;
    
    return value * 2;
}

// Funkcja testujaca zmienne lokalne w roznych blokach
void localScopeTest() {
    print "=== Test zasiegu zmiennych lokalnych ===";
    
    int outer = 10;
    print "Zmienna 'outer' = ";
    print outer;
    
    // Blok zagniezdzony
    {
        int inner = 20;
        print "Zmienna 'inner' = ";
        print inner;
        print "Zmienna 'outer' wewnatrz bloku = ";
        print outer;
        
        // Modyfikacja zmiennej z zewnętrznego zakresu
        outer = 30;
        print "Zmienna 'outer' po modyfikacji = ";
        print outer;
    }
    
    // Zmienna 'inner' nie jest tutaj dostepna
    print "Zmienna 'outer' po bloku = ";
    print outer;
}

// Funkcja testujaca zmienne w pętlach i warunkach
void controlFlowScopeTest() {
    print "=== Test zasiegu zmiennych w strukturach kontrolnych ===";
    
    // Zmienna przed pętla
    int counter = 0;
    
    // Zmienna w pętli
    for (int i = 0; i < 3; i = i + 1) {
        print "Iteracja ";
        print i;
        
        // Modyfikacja zmiennej z zewnętrznego zakresu
        counter = counter + i;
        
        // Zmienna tylko dla parzystych iteracji
        if (i % 2 == 0) {
            int evenNum = i * 2;
            print "Liczba parzysta: ";
            print evenNum;
        }
    }
    
    print "Counter po petli: ";
    print counter;
}

// Funkcja testująca rekurencje i zmienne lokalne
int recursiveTest(int n) {
    print "=== Wywolanie rekurencyjne z n = ";
    print n;
    
    // Zmienna lokalna, inna dla kazdego wywolania rekurencyjnego
    int localVar = n * 10;
    print "Lokalna zmienna = ";
    print localVar;
    
    if (n <= 1) {
        print "Warunek bazowy, zwracam 1";
        return 1;
    }
    
    int result = n + recursiveTest(n - 1);
    print "Wynik dla n = ";
    print n;
    print " to: ";
    print result;
    
    return result;
}

// Program głowny
print "=========== START TESTU ZASIEGU ZMIENNYCH ===========";

// Wyswietlenie wartosci poczatkowych zmiennych globalnych
displayGlobals();

// Test zmiennych lokalnych przeslaniających globalne
shadowingTest();

// Sprawdzenie, że zmienne globalne nie zostaly zmienione przez przesloniecie
print "=== Zmienne globalne po tescie przeslaniania ===";
displayGlobals();

// Modyfikacja zmiennych globalnych
modifyGlobals();

// Test zakresu parametrow
int paramResult = parameterScope(5);
print "Wynik funkcji parameterScope: ";
print paramResult;

// Test zakresu zmiennych lokalnych
localScopeTest();

// Test zakresu w petlach i warunkach
controlFlowScopeTest();

// Test rekurencji
print "=== Test rekurencji ===";
int recResult = recursiveTest(4);
print "Koncowy wynik rekurencji: ";
print recResult;

print "=========== KONIEC TESTU ZASIEGU ZMIENNYCH ===========";